{
  "files": [
    {
      "name": "src\/src\/Evp\/Bundle\/PaymentBundle\/PaymentHandler\/WebToPayHandler.php",
      "appliedFixers": [
        "Paysera\/php_basic_code_style_splitting_in_several_lines",
        "Paysera\/php_basic_feature_throw_base_exception",
        "Paysera\/php_basic_comment_php_doc_on_properties",
        "visibility_required",
        "binary_operator_spaces",
        "no_extra_consecutive_blank_lines"
      ],
      "diff": "--- Original\n+++ New\n@@ @@\n     private $languageMapper;\n+    \/\/ TODO: \"$defaultPaymentCountry\" - PhpBasic convention 4.3: Missing DocBlock\n     private $defaultPaymentCountry;\n+    \/\/ TODO: \"$fallbackLanguage\" - PhpBasic convention 4.3: Missing DocBlock\n@@ @@\n      *\/\n-    function __construct(\n+    public function __construct(\n@@ @@\n         if ($order->getOrderPrice() === null) {\n-            throw new Exception('Order price was not set on the last step');\n+            throw new Exception('Order price was not set on the last step'); \/\/ TODO: PhpBasic convention 3.20.1: We almost never throw base \\Exception class\n@@ @@\n     {\n-\n@@ @@\n                     'currency' => $user->getOrder()->getEvent()->getCurrency(),\n-                    'country'  => $user->getOrder()->getEvent()->getCountryCode(),\n+                    'country' => $user->getOrder()->getEvent()->getCountryCode(),\n@@ @@\n         if ($isAmountDifferent || $isCurrencyDifferent) {\n-            $this->getLogger()->debug('Order amount or currency mismatch',\n+            $this->getLogger()->debug(\n+                'Order amount or currency mismatch',\n                 [\n                     'expected' => $orderPrice,\n                     'received' => $requestAmount,\n                 ]\n             );\n             throw new OrderIntegrityException('Order amount or currency mismatch');\n         }\n     }\n \n     \/**\n      * @param User $user\n      * @param string $locale\n      * @return string\n      *\/\n     private function getAcceptUrlForUser(User $user, $locale)\n     {\n         return $this->getRouter()->generate(\n             'payment_completed',\n             [\n                 'orderToken' => $user->getOrder()->getToken(),\n                 '_locale' => $locale,\n             ],\n             true\n         );\n     }\n \n     \/**\n      * @param string $locale\n      * @return string\n      *\/\n     private function getCancelUrl($locale)\n     {\n         return $this->getRouter()->generate('payment_cancelled', ['_locale' => $locale], true);\n     }\n \n     private function buildPayText(Order $order)\n     {\n         return $this->translator->trans(\n             'payment.pay_text',\n             [\n                 '%event%' => $order->getEvent()->getName(),\n             ],\n             'TicketFrontend'\n         );\n     }\n \n     private function getWebtopayFactory(Order $order)\n     {\n         $settings = $order->getEvent()->getSettings();\n \n         return new \\WebToPay_Factory([\n             'projectId' => $settings->getProjectId(),\n             'password' => $settings->getProjectSign(),\n         ]);\n     }\n }\n \n"
    }
  ],
  "time": {
    "total": 1.319
  },
  "memory": 12
}
