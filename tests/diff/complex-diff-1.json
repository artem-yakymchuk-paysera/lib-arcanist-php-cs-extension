{
    "files": [
        {
            "name": "lib-arcanist-php-cs-extension\/tests\/diff\/complex-diff-1.php",
            "appliedFixers": [
                "ordered_class_elements",
                "no_useless_else",
                "array_syntax",
                "increment_style",
                "phpdoc_summary",
                "yoda_style",
                "no_trailing_whitespace",
                "modernize_types_casting",
                "phpdoc_order",
                "phpdoc_separation",
                "phpdoc_trim",
                "blank_line_before_statement",
                "no_whitespace_in_blank_line",
                "no_extra_blank_lines",
                "phpdoc_align",
                "braces"
            ],
            "diff": "--- Original\n+++ New\n@@ @@\n     \/**\n-     * @param EntityManager $entityManager\n-     * @param LoggerInterface $logger\n-     * @param string $eventSessionKey\n+     * @param EntityManager                                     $entityManager\n+     * @param LoggerInterface                                   $logger\n+     * @param string                                            $eventSessionKey\n      * @param \\Symfony\\Component\\HttpFoundation\\Session\\Session $session\n-     * @param TicketTypeRepository $ticketTypeRepository\n-     * @param OrderDetailsRepository $orderDetailsRepository\n-     * @param OrderRepository $orderRepository\n-     * @param EventRepository $eventRepository\n-     * @param InvoiceDetailsManager $invoiceDetailsManager\n-     * @param PriceTypeRepository $priceTypeRepository\n-     * @param TicketRepository $ticketRepository\n-     * @param TicketManufacturingPublisher $ticketManufacturingPublisher\n-     * @param InvoiceFinalManufacturingPublisher $invoiceFinalManufacturingPublisher\n-     * @param UserSession $userSession\n-     * @param PassbookTicketManager $passbookTicketManager\n-     * @param MaxTicketsPerUserProvider $maxTicketsPerUserProvider\n-     * @param ApiTicketManager $apiTicketManager\n+     * @param TicketTypeRepository                              $ticketTypeRepository\n+     * @param OrderDetailsRepository                            $orderDetailsRepository\n+     * @param OrderRepository                                   $orderRepository\n+     * @param EventRepository                                   $eventRepository\n+     * @param InvoiceDetailsManager                             $invoiceDetailsManager\n+     * @param PriceTypeRepository                               $priceTypeRepository\n+     * @param TicketRepository                                  $ticketRepository\n+     * @param TicketManufacturingPublisher                      $ticketManufacturingPublisher\n+     * @param InvoiceFinalManufacturingPublisher                $invoiceFinalManufacturingPublisher\n+     * @param UserSession                                       $userSession\n+     * @param PassbookTicketManager                             $passbookTicketManager\n+     * @param MaxTicketsPerUserProvider                         $maxTicketsPerUserProvider\n+     * @param ApiTicketManager                                  $apiTicketManager\n@@ @@\n     \/**\n-     * Creates new Order for current User\n+     * Creates new Order for current User.\n@@ @@\n     \/**\n-     * Removes OrderDetails & Tickets by provided User, Event, OrderDetails\n+     * Removes OrderDetails & Tickets by provided User, Event, OrderDetails.\n      *\n-     * @param \\Evp\\Bundle\\TicketBundle\\Entity\\User $user\n-     * @param \\Evp\\Bundle\\TicketBundle\\Entity\\Event $event\n+     * @param \\Evp\\Bundle\\TicketBundle\\Entity\\User              $user\n+     * @param \\Evp\\Bundle\\TicketBundle\\Entity\\Event             $event\n      * @param \\Evp\\Bundle\\TicketBundle\\Entity\\Step\\OrderDetails $orderDetails\n      *\/\n-    public function removeOrderDetailsAndTickets(User $user, Event $event, OrderDetails $orderDetails) {\n-        $tickets = $this->ticketRepository->findBy(array(\n+    public function removeOrderDetailsAndTickets(User $user, Event $event, OrderDetails $orderDetails)\n+    {\n+        $tickets = $this->ticketRepository->findBy([\n             'user' => $user,\n             'event' => $event,\n             'orderDetails' => $orderDetails,\n-        ));\n+        ]);\n@@ @@\n     \/**\n-     * Extends the order reservation time for a little bit more\n+     * Extends the order reservation time for a little bit more.\n      *\n      * @param Order $order\n      *\/\n-    public function extendShortTermReservationTime(Order $order) {\n+    public function extendShortTermReservationTime(Order $order)\n+    {\n@@ @@\n     \/**\n-     * Updates and persists TicketCount & Price fields in Order Entity\n+     * Updates and persists TicketCount & Price fields in Order Entity.\n@@ @@\n     \/**\n-     * Determines if the order is full of free tickets and does not require payment\n+     * Determines if the order is full of free tickets and does not require payment.\n      *\n      * @param Order $order\n+     *\n      * @return bool\n      *\/\n     public function isOrderFreeOfCharge(Order $order)\n     {\n         $totalPrice = $this->computeTotalPrice($order);\n-        return floatval($totalPrice) === floatval(0);\n+\n+        return (float) $totalPrice === (float) 0;\n     }\n \n     \/**\n-     * Compute the total price\n+     * Compute the total price.\n      *\n      * @param Order $order\n+     *\n@@ @@\n      * Extends the order reservation time (longer than short-term reservation)\n-     * This is done once the user is redirected to the payment system\n+     * This is done once the user is redirected to the payment system.\n      *\n      * @param Order $order\n      *\/\n-    public function extendLongTermReservationTime(Order $order) {\n+    public function extendLongTermReservationTime(Order $order)\n+    {\n@@ @@\n     \/**\n-     * Checks the order expiration date\n+     * Checks the order expiration date.\n      *\n      * @param Order $order\n+     *\n@@ @@\n      * @param Order $order\n+     *\n@@ @@\n             }\n-            if ($remainingTickets[$ticketType->getId()] !== null) {\n-                $remainingTickets[$ticketType->getId()]--;\n+            if (null !== $remainingTickets[$ticketType->getId()]) {\n+                --$remainingTickets[$ticketType->getId()];\n@@ @@\n     \/**\n-     * Validates Order for Invoice printing by given token\n+     * Validates Order for Invoice printing by given token.\n      *\n      * @param Order $order\n+     *\n      * @return bool\n      *\/\n-    public function isOrderValidForInvoice(Order $order = null) {\n-        if ($order === null) {\n+    public function isOrderValidForInvoice(Order $order = null)\n+    {\n+        if (null === $order) {\n             return false;\n         }\n         if (\n-            $order->getStatus() !== Order::STATUS_AWAITING_PAYMENT\n-            && $order->getStatus() !== Order::STATUS_DONE\n+            Order::STATUS_AWAITING_PAYMENT !== $order->getStatus()\n+            && Order::STATUS_DONE !== $order->getStatus()\n         ) {\n             return false;\n         }\n-        if ($order->getInvoice() === null) {\n+        if (null === $order->getInvoice()) {\n             return false;\n         }\n+\n         return true;\n     }\n \n     \/**\n-     * Checks if the order is done or not\n+     * Checks if the order is done or not.\n      *\n      * @param Order $order\n+     *\n      * @return bool\n      *\/\n     public function isOrderDone(Order $order)\n     {\n-        return $order->getStatus() === Order::STATUS_DONE;\n+        return Order::STATUS_DONE === $order->getStatus();\n     }\n \n     \/**\n      * @param Order $order\n+     *\n@@ @@\n         $this->updateOrderDiscountAmount($order);\n+\n@@ @@\n         foreach ($order->getOrderDetails() as $detail) {\n-            if ($detail->getPriceType() !== null) {\n+            if (null !== $detail->getPriceType()) {\n@@ @@\n     \/**\n-     * Updates Seat status\n+     * Updates Seat status.\n      *\n      * @param Order $order\n+     *\n@@ @@\n         }\n+\n@@ @@\n     \/**\n-     * Modifies or creates new OrderDetail\n+     * Modifies or creates new OrderDetail.\n@@ @@\n         $orderDetailsRepository = $this->entityManager->getRepository('Evp\\Bundle\\TicketBundle\\Entity\\Step\\OrderDetails');\n-        $currentOrderDetail = $orderDetailsRepository->findOneBy(array(\n+        $currentOrderDetail = $orderDetailsRepository->findOneBy([\n             'ticketType' => $ticketType,\n             'user' => $user,\n-        ));\n+        ]);\n         $totalDetails = $orderDetailsRepository->getAllByUserAndEvent($user, $ticketType->getEvent());\n \n         $currentlyExistingCount = 0;\n         foreach ($totalDetails as $totalDetail) {\n-            if ($currentOrderDetail !== null) {\n+            if (null !== $currentOrderDetail) {\n@@ @@\n         if ($availabilityResult->isAvailable()) {\n-            if ($currentOrderDetail === null) {\n+            if (null === $currentOrderDetail) {\n                 return $result->setOrderDetails(\n                     $this->createNewOrderDetail($user, $ticketType, $priceType, $countForTicketType)\n                 );\n             }\n+\n@@ @@\n \n-        if ($availabilityResult->getTicketType() === null) {\n+        if (null === $availabilityResult->getTicketType()) {\n@@ @@\n      * @param Order $order\n+     *\n@@ @@\n      * @param User $user\n-     * @param int $ticketTypeId\n-     * @param int $priceTypeId\n-     * @param int $count\n+     * @param int  $ticketTypeId\n+     * @param int  $priceTypeId\n+     * @param int  $count\n      *\n+     * @throws InvalidTicketCountException\n+     *\n      * @return OrderDetails\n-     *\n-     * @throws InvalidTicketCountException\n@@ @@\n \n-        if ($ticketType === null || $priceType === null || empty($count)) {\n+        if (null === $ticketType || null === $priceType || empty($count)) {\n@@ @@\n         $result = $this->modifyOrderDetailsCountForTicketType($ticketType, $priceType, $count, $user);\n-        if ($result->getOrderDetails() === null) {\n+        if (null === $result->getOrderDetails()) {\n@@ @@\n     \/**\n-     * @param User       $user\n-     * @param TicketType $ticketType\n-     * @param PriceType  $priceType\n-     * @param int        $count\n-     *\n-     * @return OrderDetails\n-     *\/\n-    private function createNewOrderDetail(User $user, TicketType $ticketType, PriceType $priceType, $count)\n-    {\n-        $orderDetail = new OrderDetails();\n-        $orderDetail\n-            ->setOrder($user->getOrder())\n-            ->setEvent($ticketType->getEvent())\n-            ->setTicketsCount($count)\n-            ->setUser($user)\n-            ->setTicketType($ticketType)\n-            ->setPriceType($priceType)\n-            ->setOriginalPrice($priceType->getPrice())\n-        ;\n-\n-        $this->entityManager->persist($orderDetail);\n-        return $orderDetail;\n-    }\n-\n-    \/**\n-     * @param TicketType $ticketType\n-     * @param int $currentlyExistingCount\n-     * @param int $countForTicketType\n+     * @param TicketType        $ticketType\n+     * @param int               $currentlyExistingCount\n+     * @param int               $countForTicketType\n@@ @@\n             ;\n+\n             return $availabilityResult;\n-        }\n-\n-        elseif ($ticketType->getMaxTicketsPerUser() !== null) {\n+        } elseif (null !== $ticketType->getMaxTicketsPerUser()) {\n             if ($countForTicketType > $ticketType->getMaxTicketsPerUser()) {\n                 $availabilityResult\n                     ->setAvailableCount($ticketType->getMaxTicketsPerUser())\n                     ->setAvailable(false)\n                 ;\n+\n                 return $availabilityResult;\n             }\n         }\n \n-        if ($freeTickets !== null) {\n+        if (null !== $freeTickets) {\n             $availabilityResult\n                 ->setTicketType($ticketType)\n                 ->setAvailableCount($freeTickets)\n             ;\n-            if ($currentOrderDetail !== null) {\n+            if (null !== $currentOrderDetail) {\n                 if (($countForTicketType - $currentOrderDetail->getTicketsCount()) > $freeTickets) {\n                     return $availabilityResult->setAvailable(false);\n-                } else {\n-                    return $availabilityResult->setAvailable(true);\n                 }\n-            } else {\n-                if ($countForTicketType > $maxAllowed) {\n-                    return $availabilityResult->setAvailable(false);\n-                } else {\n-                    return $availabilityResult->setAvailable(true);\n-                }\n+\n+                return $availabilityResult->setAvailable(true);\n             }\n+            if ($countForTicketType > $maxAllowed) {\n+                return $availabilityResult->setAvailable(false);\n+            }\n+\n+            return $availabilityResult->setAvailable(true);\n@@ @@\n     \/**\n-     * @param int $orderId\n+     * @param int  $orderId\n      * @param bool $lock\n+     *\n@@ @@\n      * @param string $orderToken\n-     * @param bool $lock\n+     * @param bool   $lock\n@@ @@\n      * @param Order $order\n+     *\n@@ @@\n         $now = new \\DateTime();\n+\n         return $now->add($event->getSettings()->getCashierReservationDateInterval());\n     }\n \n     \/**\n-     * @param Event $event\n+     * Confirms the order and updates all of the needed fields.\n      *\n-     * @return \\DateTime\n-     *\/\n-    private function getStepExpirationDate(Event $event)\n-    {\n-        $now = new \\DateTime();\n-        return $now->add($event->getSettings()->getStepReservationDateInterval());\n-    }\n-\n-    \/**\n-     * @param Event $event\n-     *\n-     * @return \\DateTime\n-     *\/\n-    private function getPaymentExpirationDate(Event $event)\n-    {\n-        $now = new \\DateTime();\n-        return $now->add($event->getSettings()->getPaymentAwaitDateInterval());\n-    }\n-\n-    \/**\n-     * Confirms the order and updates all of the needed fields\n-     *\n@@ @@\n         foreach ($orderTickets as $ticket) {\n-            if ($ticket->getSeat() !== null) {\n+            if (null !== $ticket->getSeat()) {\n@@ @@\n     \/**\n-     * Publishes an order to the ticket\/invoice generation queue\n+     * Publishes an order to the ticket\/invoice generation queue.\n@@ @@\n         }\n+    }\n+\n+    \/**\n+     * @param User       $user\n+     * @param TicketType $ticketType\n+     * @param PriceType  $priceType\n+     * @param int        $count\n+     *\n+     * @return OrderDetails\n+     *\/\n+    private function createNewOrderDetail(User $user, TicketType $ticketType, PriceType $priceType, $count)\n+    {\n+        $orderDetail = new OrderDetails();\n+        $orderDetail\n+            ->setOrder($user->getOrder())\n+            ->setEvent($ticketType->getEvent())\n+            ->setTicketsCount($count)\n+            ->setUser($user)\n+            ->setTicketType($ticketType)\n+            ->setPriceType($priceType)\n+            ->setOriginalPrice($priceType->getPrice())\n+        ;\n+\n+        $this->entityManager->persist($orderDetail);\n+\n+        return $orderDetail;\n+    }\n+\n+    \/**\n+     * @param Event $event\n+     *\n+     * @return \\DateTime\n+     *\/\n+    private function getStepExpirationDate(Event $event)\n+    {\n+        $now = new \\DateTime();\n+\n+        return $now->add($event->getSettings()->getStepReservationDateInterval());\n+    }\n+\n+    \/**\n+     * @param Event $event\n+     *\n+     * @return \\DateTime\n+     *\/\n+    private function getPaymentExpirationDate(Event $event)\n+    {\n+        $now = new \\DateTime();\n+\n+        return $now->add($event->getSettings()->getPaymentAwaitDateInterval());\n     }\n }\n \n"
        }
    ],
    "time": {
        "total": 2.241
    },
    "memory": 14
}
